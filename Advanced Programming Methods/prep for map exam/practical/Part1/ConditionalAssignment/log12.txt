ID: 12
Execution Stack: [Ref(int) a ; Ref(int) b ; int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) a, Ref(int) b ; int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) a, Ref(int) b ; int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) b ; int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) b ; int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) b, int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) b, int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int v ; a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int v, a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int v, a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (0) ; b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (0), b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (0), b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(0, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {1=0}

ID: 12
Execution Stack: [b= new (0) ; write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {1=0}

ID: 12
Execution Stack: [b= new (0), write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {1=0}

ID: 12
Execution Stack: [b= new (0), write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(0, int), v=0}
Output: []
FileTable: {}
Heap: {1=0}

ID: 12
Execution Stack: [write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=0, 2=0}

ID: 12
Execution Stack: [write(a,1) ; write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=0, 2=0}

ID: 12
Execution Stack: [write(a,1), write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=0, 2=0}

ID: 12
Execution Stack: [write(a,1), write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=0, 2=0}

ID: 12
Execution Stack: [write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=0}

ID: 12
Execution Stack: [write(b,2) ; v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=0}

ID: 12
Execution Stack: [write(b,2), v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=0}

ID: 12
Execution Stack: [write(b,2), v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=0}

ID: 12
Execution Stack: [v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=read(a) < read(b)?100 : 200 ; print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=read(a) < read(b)?100 : 200, print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=read(a) < read(b)?100 : 200, print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [if( read(a) < read(b) ) then {v=100} else {v=200}, print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [if( read(a) < read(b) ) then {v=100} else {v=200}, print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=100, print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=100, print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=0}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [print(v) ; v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [print(v), v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [print(v), v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: []
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=read(b) - 2 > read(a)?100 : 200 ; print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=read(b) - 2 > read(a)?100 : 200, print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=read(b) - 2 > read(a)?100 : 200, print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [if( read(b) - 2 > read(a) ) then {v=100} else {v=200}, print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [if( read(b) - 2 > read(a) ) then {v=100} else {v=200}, print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=200, print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [v=200, print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=100}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=200}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: [print(v)]
Symbol Table: {a=(1, int), b=(2, int), v=200}
Output: [100]
FileTable: {}
Heap: {1=1, 2=2}

ID: 12
Execution Stack: []
Symbol Table: {a=(1, int), b=(2, int), v=200}
Output: [100, 200]
FileTable: {}
Heap: {1=1, 2=2}

