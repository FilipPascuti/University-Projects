ID: 12
Execution Stack: [Ref(int) a ; a= new (20) ; model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) a, a= new (20) ; model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) a, a= new (20) ; model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20) ; model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20) ; model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20), model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20), model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [model.statements.ForStatement@7c725f11 ; print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [model.statements.ForStatement@7c725f11, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [model.statements.ForStatement@7c725f11, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v ; v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v ; v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v, v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v, v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: []
Symbol Table: {a=(1, int), v=0}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: []
Symbol Table: {a=(1, int), v=20}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: []
Symbol Table: {a=(1, int), v=3}
Output: [0, 1, 2, 20]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: []
Symbol Table: {a=(1, int), v=40}
Output: [0, 1, 2, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [Ref(int) a ; a= new (20) ; for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) a, a= new (20) ; for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) a, a= new (20) ; for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20) ; for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20) ; for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20), for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [a= new (20), for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {a=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))} ; print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [for(int v ; v=0,v < 3, v=v + 1) {fork(print(v) ; v=v * read(a))}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v ; v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v ; v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v, v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [int v, v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=0, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: []
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: []
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=0}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 13
Execution Stack: []
Symbol Table: {a=(1, int), v=0}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)) ; v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=1}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: []
Symbol Table: {a=(1, int), v=20}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [fork(print(v) ; v=v * read(a)), v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [v=v + 1, while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v) ; v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [while(v < 3) {fork(print(v) ; v=v * read(a)) ; v=v + 1}, print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [print(v), v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=3}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: [v=v * read(a)]
Symbol Table: {a=(1, int), v=2}
Output: [0, 1, 2]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: []
Symbol Table: {a=(1, int), v=3}
Output: [0, 1, 2, 20]
FileTable: {}
Heap: {1=20}

ID: 15
Execution Stack: []
Symbol Table: {a=(1, int), v=40}
Output: [0, 1, 2, 20]
FileTable: {}
Heap: {1=20}

