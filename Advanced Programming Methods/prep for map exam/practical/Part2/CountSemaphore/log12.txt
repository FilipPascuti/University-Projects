ID: 12
Execution Stack: [Ref(int) v1 ; int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1), createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1), createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [release(cnt), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [release(cnt), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2), print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2), print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt), acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt), acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [Ref(int) v1 ; int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1) ; createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1), createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (1), createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [createSemaphore(cnt, read(v1)), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=0, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: []
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [release(cnt) ; fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 13
Execution Stack: [write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=1}

ID: 12
Execution Stack: [release(cnt), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [release(cnt), fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)) ; write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [fork(acquire(cnt) ; write(v1,read(v1) * 10)), write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2) ; print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt) ; write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2), print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [write(v1,read(v1) * 2), print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=10}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(v1)) ; release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [print(read(v1)), release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt) ; acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt), acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [release(cnt), acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt) ; print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 12
Execution Stack: [acquire(cnt), print(read(v1) - 1) ; release(cnt)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

ID: 14
Execution Stack: [acquire(cnt), write(v1,read(v1) * 10)]
Symbol Table: {cnt=1, v1=(1, int)}
Output: [1, 20]
FileTable: {}
Heap: {1=20}

