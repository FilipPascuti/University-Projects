ID: 12
Execution Stack: [Ref(int) v1 ; Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20, 300]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 12
Execution Stack: [Ref(int) v1 ; Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20, 300]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 12
Execution Stack: [Ref(int) v1 ; Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20, 300]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 12
Execution Stack: [Ref(int) v1 ; Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20, 300]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 12
Execution Stack: [Ref(int) v1 ; Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20, 300]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 12
Execution Stack: [Ref(int) v1 ; Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v1, Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2 ; Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v2, Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3 ; int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [Ref(int) v3, int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt ; v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [int cnt, v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2) ; v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v1= new (2), v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3) ; v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v2= new (3), v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4) ; barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [v3= new (4), barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt) ; fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [barrier(read(v2), cnt), fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))) ; fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))), fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))) ; await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt) ; write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [fork(await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))), await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt) ; print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt) ; write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [await(cnt), print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [await(cnt), write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [await(cnt), write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: [print(read(v3))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10) ; print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: []
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 12
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [write(v1,read(v1) * 10), print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=2, 2=3, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: [print(read(v1))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10) ; print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 13
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [write(v2,read(v2) * 10), print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=30, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: [print(read(v2))]
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

ID: 14
Execution Stack: []
Symbol Table: {cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output: [4, 20, 300]
FileTable: {}
Heap: {1=20, 2=300, 3=4}

