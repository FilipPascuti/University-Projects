     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf                ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 00                          sign db 0
    16 00000001 257300                      format db "%s", 0
    17 00000004 256400                      format2 db "%d", 0
    18 00000007 00<rept>                    numbers times 100 db 0
    19 0000006B 00<rept>                    result times 100 db 0
    20 000000CF 0000                        x dw 0
    21                                      
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ... 
    27                                          
    28                                          ;scanf(format, a)
    29 00000000 68[07000000]                    push numbers 
    30 00000005 68[01000000]                    push format
    31 0000000A FF15[00000000]                  call [scanf]
    32 00000010 83C408                          add esp, 4 * 2
    33                                          
    34                                          ;printf(format)
    35                                          ; push numbers
    36                                          ; push format
    37                                          ; call [printf]
    38                                          ; add esp, 4 * 2
    39                                          
    40 00000013 BE[07000000]                    mov esi, numbers
    41 00000018 BF[6B000000]                    mov edi, result
    42                                          
    43 0000001D BA00000000                      mov edx, 0
    44 00000022 B900000000                      mov ecx, 0
    45 00000027 BB00000000                      mov ebx, 0
    46                                          
    47                                          repeat:
    48 0000002C AC                                  lodsb; al := [esi]
    49 0000002D 3C00                                cmp al, 0
    50 0000002F 0F8499000000                        je final
    51                                              
    52 00000035 3C2C                                cmp al, ','
    53 00000037 7554                                jne check_negative
    54 00000039 803D[00000000]01                    cmp byte[sign], 1
    55                                              
    56 00000040 7416                                je is_neg
    57 00000042 66A1[CF000000]                      mov ax, [x]
    58 00000048 C605[CF000000]0A                    mov byte[x], 10
    59 0000004F F635[CF000000]                      div byte[x]
    60 00000055 AA                                  stosb
    61 00000056 EB16                                jmp not_neg
    62                                              
    63                                              is_neg:
    64                                              
    65 00000058 66A1[CF000000]                      mov ax, [x]
    66 0000005E C605[CF000000]0A                    mov byte[x], 10
    67 00000065 F635[CF000000]                      div byte[x]
    68 0000006B F6D8                                neg al
    69 0000006D AA                                  stosb
    70                                              
    71                                              not_neg:
    72 0000006E C605[00000000]00                    mov byte[sign], 0
    73 00000075 BA00000000                          mov edx, 0
    74 0000007A B900000000                          mov ecx, 0
    75 0000007F BB00000000                          mov ebx, 0
    76 00000084 66C705[CF000000]00-                 mov word[x], 0
    76 0000008C 00                 
    77                                              
    78                                              check_negative:
    79 0000008D 3C2D                                    cmp al, '-'
    80 0000008F 7507                                    jne positive
    81                                                  
    82 00000091 C605[00000000]01                        mov byte[sign], 1
    83                                                  
    84                                                  positive:
    85 00000098 3C30                                        cmp al, '0'
    86 0000009A 7302                                        jae check_if_digit
    87 0000009C EB8E                                        jmp repeat
    88                                                      check_if_digit:
    89 0000009E 3C39                                            cmp al, '9'
    90 000000A0 7602                                            jbe is_digit
    91 000000A2 EB88                                            jmp repeat
    92                                                          is_digit:
    93 000000A4 803D[CF000000]00                                cmp byte[x], 0
    94 000000AB 741C                                            je new_number
    95 000000AD 88C3                                            mov bl, al
    96 000000AF A0[CF000000]                                    mov al, [x]
    97 000000B4 C605[CF000000]0A                                mov byte[x], 10
    98 000000BB F625[CF000000]                                  mul byte[x]
    99 000000C1 00D8                                            add al, bl
   100 000000C3 66A3[CF000000]                                  mov word[x], ax
   101                                                          new_number:
   102 000000C9 A2[CF000000]                                        mov byte[x], al
   103                                          final:
   104                                              
   105 000000CE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   106 000000D0 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
