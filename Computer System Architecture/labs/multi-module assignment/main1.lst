     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf                ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  %include "reading.asm"
     1                              <1> %ifndef _READING_ASM_
     2                              <1> %define _READING_ASM_
     3                              <1> 
     4                              <1> ; read(n)
     5                              <1>     read:
     6 00000000 55                  <1>         push ebp 
     7 00000001 89E5                <1>         mov ebp, esp
     8                              <1>         
     9 00000003 8B7508              <1>         mov esi, [ebp + 8]
    10 00000006 8B7D0C              <1>         mov edi, [ebp + 12]
    11                              <1>         
    12                              <1>         repeat:
    13 00000009 AC                  <1>             lodsb; al := [esi]
    14 0000000A 3C00                <1>             cmp al, 0
    15 0000000C 0F8487000000        <1>             je final
    16                              <1>             
    17 00000012 3C2C                <1>             cmp al, ','
    18 00000014 7540                <1>             jne check_negative
    19 00000016 803D[9B000000]01    <1>             cmp byte[sign], 1
    20 0000001D 740C                <1>             je is_neg
    21 0000001F 88C3                <1>             mov bl, al
    22 00000021 A0[6A010000]        <1>             mov al, [x]
    23 00000026 AA                  <1>             stosb
    24 00000027 88D8                <1>             mov al, bl
    25 00000029 EB0C                <1>             jmp not_neg
    26                              <1>             
    27                              <1>             is_neg:
    28 0000002B 88C3                <1>             mov bl, al
    29 0000002D A0[6A010000]        <1>             mov al, [x]
    30 00000032 F6D8                <1>             neg al
    31 00000034 AA                  <1>             stosb
    32 00000035 88D8                <1>             mov al, bl
    33                              <1>             not_neg:
    34 00000037 C605[9B000000]00    <1>             mov byte[sign], 0
    35 0000003E BA00000000          <1>             mov edx, 0
    36 00000043 B900000000          <1>             mov ecx, 0
    37 00000048 BB00000000          <1>             mov ebx, 0
    38 0000004D 66C705[6A010000]00- <1>             mov word[x], 0
    38 00000055 00                  <1>
    39                              <1>             
    40                              <1>             check_negative:
    41 00000056 3C2D                <1>                 cmp al, '-'
    42 00000058 7507                <1>                 jne positive
    43                              <1>                 
    44 0000005A C605[9B000000]01    <1>                 mov byte[sign], 1
    45                              <1>                 
    46                              <1>                 positive:
    47 00000061 3C30                <1>                     cmp al, '0'
    48 00000063 7302                <1>                     jae check_if_digit
    49 00000065 EBA2                <1>                     jmp repeat
    50                              <1>                     check_if_digit:
    51 00000067 3C39                <1>                         cmp al, '9'
    52 00000069 7602                <1>                         jbe is_digit
    53 0000006B EB9C                <1>                         jmp repeat
    54                              <1>                         is_digit:
    55 0000006D 2C30                <1>                         sub al, 48
    56 0000006F 803D[6A010000]00    <1>                         cmp byte[x], 0
    57 00000076 741C                <1>                         je new_number
    58 00000078 88C3                <1>                         mov bl, al
    59 0000007A A0[6A010000]        <1>                         mov al, [x]
    60 0000007F C605[6A010000]0A    <1>                         mov byte[x], 10
    61 00000086 F625[6A010000]      <1>                         mul byte[x]
    62 0000008C 00D8                <1>                         add al, bl
    63 0000008E 66A3[6A010000]      <1>                         mov word[x], ax
    64                              <1>                         new_number:
    65 00000094 A2[6A010000]        <1>                             mov byte[x], al
    66                              <1>         final:
    67                              <1>         
    68 00000099 5D                  <1>         pop ebp
    69 0000009A C3                  <1>         ret 
    70                              <1> %endif
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 0000009B 00                          sign db 0
    16 0000009C 257300                      format db "%s", 0
    17 0000009F 256400                      format2 db "%d", 0
    18 000000A2 00<rept>                    numbers times 100 db 0
    19 00000106 00<rept>                    result times 100 db 0
    20 0000016A 0000                        x dw 0
    21                                      
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ... 
    27                                          
    28                                          ;scanf(format, a)
    29 00000000 68[A2000000]                    push numbers 
    30 00000005 68[9C000000]                    push format
    31 0000000A FF15[00000000]                  call [scanf]
    32 00000010 83C408                          add esp, 4 * 2
    33                                          
    34                                          ;printf(format)
    35                                          ; push numbers
    36                                          ; push format
    37                                          ; call [printf]
    38                                          ; add esp, 4 * 2
    39                                          
    40 00000013 BE[A2000000]                    mov esi, numbers
    41 00000018 BF[06010000]                    mov edi, result
    42                                          
    43 0000001D BA00000000                      mov edx, 0
    44 00000022 B900000000                      mov ecx, 0
    45 00000027 BB00000000                      mov ebx, 0
    46                                          
    47 0000002C 57                              push edi
    48 0000002D 56                              push esi
    49 0000002E E8(00000000)                    call read
    50                                              
    51 00000033 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 00000035 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
