     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 616E612E74787400            file_name db "ana.txt", 0
    17 00000008 7700                        access_mode db "w", 0
    18 0000000A 00000000                    fd dd 0
    19 0000000E 25640A0D00                  format db "%d", 10, 13, 0
    20 00000013 0100000002000000EF-         a dd 1, 2, -17, 9
    20 0000001C FFFFFF09000000     
    21                                      len equ ($-a)/4
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          
    28                                          ;1. open the file
    29                                          
    30                                          ;fopen(file_name, access_mode)
    31 00000000 68[08000000]                    push access_mode
    32 00000005 68[00000000]                    push file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4 * 2
    35                                          
    36                                          ;eax =file_descriptor
    37 00000013 A3[0A000000]                    mov [fd], eax
    38                                          
    39                                          ;check if fopen failed
    40 00000018 83F800                          cmp eax, 0
    41 0000001B 7454                            je final
    42                                          
    43                                          ;2. write
    44 0000001D B904000000                      mov ecx, len
    45 00000022 E34D                            jecxz final
    46 00000024 BE[13000000]                    mov esi, a
    47 00000029 FC                              cld
    48 0000002A BA00000000                      mov edx, 0
    49                                          do:
    50 0000002F AD                                  lodsd
    51 00000030 01C2                                add edx, eax
    52 00000032 60                                  pusha
    53                                              ;fprintf(file_descriptor, format, eax)
    54 00000033 50                                  push eax
    55 00000034 68[0E000000]                        push format
    56 00000039 FF35[0A000000]                      push dword[fd]
    57 0000003F FF15[00000000]                      call [fprintf]
    58 00000045 83C40C                              add esp, 4 * 3
    59 00000048 61                                  popa
    60 00000049 E2E4                                loop do
    61                                          
    62                                          ;fprintf(file_descriptor, format, edx)
    63 0000004B 60                              pusha
    64 0000004C 52                              push edx
    65 0000004D 68[0E000000]                    push format
    66 00000052 FF35[0A000000]                  push dword[fd]
    67 00000058 FF15[00000000]                  call [fprintf]
    68 0000005E 83C40C                          add esp, 4 * 3
    69 00000061 61                              popa
    70                                          
    71                                          ;3. close the file
    72                                          ;fclose(file_descriptor)
    73 00000062 FF35[0A000000]                  push dword[fd]
    74 00000068 FF15[00000000]                  call [fclose]
    75 0000006E 83C404                          add esp, 4
    76                                          final:
    77                                              ; exit(0)
    78 00000071 6A00                                push    dword 0      ; push the parameter for exit onto the stack
    79 00000073 FF15[00000000]                      call    [exit]       ; call exit to terminate the program
