     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, printf, fread, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fread msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 6A616E612E74787400          file_name db "jana.txt", 0
    18 00000009 7200                        acc_mode db "r", 0
    19 0000000B 0A0D00                      format db 10, 13, 0
    20 0000000E 00<rept>                    buf times 10 db 0
    21 00000018 00                              db 0
    22 00000019 00000000                    fd dd 0
    23                                      siz equ 10
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29                                      
    30                                          ;1. open the file
    31                                          ; fopen(file_name, acc_mode)
    32 00000000 68[09000000]                    push acc_mode
    33 00000005 68[00000000]                    push file_name
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4 * 2
    36 00000013 A3[19000000]                    mov [fd], eax
    37 00000018 83F800                          cmp eax, 0
    38 0000001B 7450                            je final
    39                                          do:
    40                                              ;fread(buf, 1, siz, fd)
    41 0000001D FF35[19000000]                      push dword[fd]
    42 00000023 6A0A                                push dword siz
    43 00000025 6A01                                push dword 1
    44 00000027 68[0E000000]                        push buf
    45 0000002C FF15[00000000]                      call [fread]
    46 00000032 83C410                              add esp, 4 * 4
    47 00000035 83F800                              cmp eax, 0; check if we reached the end of the file
    48 00000038 7425                                je after_read
    49 0000003A C680[0E000000]00                    mov [buf + eax], byte 0
    50                                              
    51                                              ;printf(buf)
    52 00000041 68[0E000000]                        push buf
    53 00000046 FF15[00000000]                      call [printf]
    54 0000004C 83C404                              add esp, 4
    55                                              
    56 0000004F 68[0B000000]                        push format
    57 00000054 FF15[00000000]                      call [printf]
    58 0000005A 83C404                              add esp, 4
    59                                              
    60 0000005D EBBE                                jmp do
    61                                          after_read:
    62                                              ;fclose(file_descriptor)
    63 0000005F 68[19000000]                        push fd
    64 00000064 FF15[00000000]                      call [fclose]
    65 0000006A 83C404                              add esp, 4
    66                                              final:
    67                                                  ; exit(0)
    68 0000006D 6A00                                    push    dword 0      ; push the parameter for exit onto the stack
    69 0000006F FF15[00000000]                          call    [exit]       ; call exit to terminate the program
