     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 FE                          a DB -2
    15 00000001 FD                          b DB -3
    16 00000002 0400                        c DW  4
    17 00000004 23010000                    e DD  0x123
    18 00000008 CDAB000000000000            x DQ  0xABCD
    19 00000010 00000000                    t dd 0
    20                                  
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                          ;(a+b*c+2/c)/(2+a)+e+x; a,b-byte; c-word; e-doubleword; x-qword
    27 00000000 A0[01000000]                    mov al, [b]
    28 00000005 6698                            cbw; ax = b
    29 00000007 66F72D[02000000]                imul word[c]
    30                                          ;dx:ax = b * c
    31 0000000E 66A3[10000000]                  mov [t], ax
    32 00000014 668915[12000000]                mov [t + 2], dx
    33                                          ;t = b * c
    34 0000001B 66B80200                        mov ax, 2
    35 0000001F 6699                            cwd; dx:ax = 2
    36 00000021 66F73D[02000000]                idiv word[c]; ax = 2 / c   dx = 2 % c
    37 00000028 98                              cwde ; eax = 2 / c
    38 00000029 0305[10000000]                  add eax, [t]
    39 0000002F 89C3                            mov ebx, eax ; ebx = b * c + 2 / c-word
    40 00000031 A0[00000000]                    mov al, [a]
    41 00000036 6698                            cbw
    42 00000038 98                              cwde ; eax = add
    43 00000039 01C3                            add ebx, eax; a + b * c + 2 / c
    44 0000003B A0[00000000]                    mov al, [a]
    45 00000040 0402                            add al, 2
    46 00000042 6698                            cbw
    47 00000044 98                              cwde; eax = a + 2
    48 00000045 89C1                            mov ecx, eax; ecx = a + 2
    49 00000047 89D8                            mov eax, ebx
    50 00000049 99                              cdq
    51 0000004A F7F9                            idiv ecx ; eax = (a + b * c + 2 / c) / (a + 2)
    52 0000004C 0305[04000000]                  add eax, [e]
    53 00000052 99                              cdq
    54 00000053 0305[08000000]                  add eax, [x]
    55 00000059 1315[0C000000]                  adc edx, [x + 4]; edx:eax = (a + b * c + 2 / c) / (2 + a) + e + x
    56                                          ; exit(0)
    57 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
