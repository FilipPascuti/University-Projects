     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ; a, b, c - byte
    15                                      ; d - doubleword
    16                                      ; e - qword
    17 00000000 09                          a db 9
    18 00000001 01                          b db 1
    19 00000002 02                          c db 2
    20 00000003 01000000                    d dd 1
    21 00000007 0A00000000000000            e dq 10
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          ;2 / (a + b * c - 9) + e - d
    28                                          ; a, b, c - byte
    29                                          ; d - doubleword
    30                                          ; e - qword
    31 00000000 B800000000                      mov eax, 0; eax = 0
    32 00000005 BB00000000                      mov ebx, 0; ebx = 0
    33 0000000A B900000000                      mov ecx, 0; ecx = 0
    34 0000000F BA00000000                      mov edx, 0; edx = 0
    35 00000014 A0[01000000]                    mov al, [b]; al = b
    36 00000019 F625[02000000]                  mul byte[c]; ax = al * c = b * c 
    37 0000001F 6689C3                          mov bx, ax; bx = ax = b * c
    38 00000022 A0[00000000]                    mov al, [a]; al = a
    39 00000027 6698                            cbw; ax = a 
    40 00000029 6601D8                          add ax, bx; ax = a + b * c
    41 0000002C 6683E809                        sub ax, 9; ax = a + b * c - 9
    42 00000030 6689C3                          mov bx, ax; bx = ax = a + b * c - 9
    43 00000033 66B80200                        mov ax, 2
    44 00000037 66BA0000                        mov dx, 0
    45 0000003B 66F7FB                          idiv bx; ax = 2 / (a + b * c - 9), dx = 2 % (a + b * c - 9)
    46 0000003E 6699                            cwd; eax = ax = 2 / (a + b * c - 9)
    47 00000040 99                              cdq; edx:eax = eax = 2 / (a + b * c - 9) 
    48 00000041 0305[07000000]                  add eax, [e]; eax = the least segnificant part of 2 / (a + b * c - 9) + e
    49 00000047 1315[0B000000]                  adc edx, [e + 4]; edx = the most segnificant part of 2 / (a + b * c - 9) + e
    50 0000004D 89C3                            mov ebx, eax; ebx = eax = the least segnificant part of 2 / (a + b * c - 9) + e
    51 0000004F 89D1                            mov ecx, edx; ecx = edx = the most segnificant part of 2 / (a + b * c - 9) + e
    52 00000051 A1[03000000]                    mov eax, [d]; eax = d
    53 00000056 99                              cdq; edx:eax = eax = d
    54 00000057 29C3                            sub ebx, eax; ebx = the least segnificant part of 2 / (a + b * c - 9) + e - d
    55 00000059 19D1                            sbb ecx, edx; ecx = the most segnificant part of 2 / (a + b * c - 9) + e - d
    56                                          ; exit(0)
    57 0000005B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 0000005D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
