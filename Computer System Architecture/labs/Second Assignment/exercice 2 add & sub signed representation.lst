     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword
    14 00000000 01                          a db 1
    15 00000001 0100                        b dw 1
    16 00000003 04000000                    c dd 4
    17 00000007 0100000000000000            d dq 1
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;(c + b) - a - (d + d) a - byte, b - word, c - double word, d - qword
    24 00000000 B800000000                      mov eax, 0; eax = 0
    25 00000005 BB00000000                      mov ebx, 0; ebx = 0
    26 0000000A BA00000000                      mov edx, 0; edx = 0
    27 0000000F 66A1[01000000]                  mov ax, [b]; ax = b
    28 00000015 98                              cwde; eax = b
    29 00000016 0305[03000000]                  add eax, [c]; eax = c + b
    30 0000001C 89C3                            mov ebx, eax; ebx = eax = c + b
    31 0000001E A0[00000000]                    mov al, [a]; al = a
    32 00000023 6698                            cbw; ax = a 
    33 00000025 98                              cwde; eax = a
    34 00000026 29C3                            sub ebx, eax; ebx = ebx - eax = (c + b) - a
    35 00000028 89D8                            mov eax , ebx; eax = ebx = (c + b) - a
    36 0000002A 99                              cdq; edx:eax = (c + b) - a
    37 0000002B 8B1D[07000000]                  mov ebx, [d]; ebx = least segnificant part of d
    38 00000031 8B0D[0B000000]                  mov ecx, [d + 4]; ecx = most segnificant part of d
    39 00000037 031D[07000000]                  add ebx, [d]; ebx = least segnificant part of d + d
    40 0000003D 130D[0B000000]                  adc ecx, [d + 4]; ecx = least segnificant part of d + d
    41 00000043 29D8                            sub eax, ebx; eax = least segnificant part of (c + b) - a - (d + d)
    42 00000045 19CA                            sbb edx, ecx; edx = most segnificant part of (c + b) - a - (d + d)
    43                                          ; exit(0)
    44 00000047 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 00000049 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
